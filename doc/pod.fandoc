Overview
********
'WebSockets' is a faithful implementaion of the [W3C WebSocket API]`http://www.w3.org/TR/websockets/` and adheres to [RFC 6455]`http://tools.ietf.org/html/rfc6455`.

An AlienFactory WebSocket may be used on the server

 for the
[Wisp]`http://fantom.org/doc/wisp/index.html` web server and
[afBedSheet]`http://repo.status302.com/doc/afBedSheet/#overview` web application framework.

Note that WebSockets does not currently support frame fragmentation or continuations.



Quick Start
***********
1. Create a text file called 'ChatboxExample.fan'

    using afWebSockets
    using afIoc
    using afBedSheet
    using afBedSheet::Text as BsText
    using afConcurrent::Synchronized
    using afDuvet::DuvetModule
    using afDuvet::HtmlInjector
    using concurrent::ActorPool
    using fwt

    class Chatbox {
        static Void main(Str[] args) {
            if (args.first == "client")
                ChatboxClient().main
            else
                afBedSheet::Main().main("${AppModule#.qname} 8069".split)
        }
    }

    // @SubModule only required because the example is run as a script
    @SubModule { modules=[WebSocketsModuleV1#, DuvetModule#] }
    class AppModule {
        @Contribute { serviceType=Routes# }
        static Void contributeRoutes(Configuration conf) {
            conf.add(Route(`/`,     ChatboxRoutes#indexPage))
            conf.add(Route(`/ws`,   ChatboxRoutes#serviceWebSocket))
        }
    }

    const class ChatboxRoutes {
        @Inject private const WebSockets    webSockets
        @Inject private const HtmlInjector  htmlInjector

        new make(|This|in) { in(this) }

        BsText indexPage() {
            htmlInjector.injectFantomMethod(ChatboxClient#main)
            return BsText.fromHtml(
                "<!doctype>
                 <html>
                 <head>
                    <title>WebSocket ChatBox Example</title>
                 </head>
                 <body>
                 </body>
                 </html>")
        }

        WebSocket serviceWebSocket() {
            WebSocket.make() {
                ws := it
                onMessage = |MsgEvent me| {
                    webSockets.broadcast("${ws.id} says, '${me.msg}'")
                }
            }
        }
    }

    @Js
    class ChatboxClient {
        Void main() {
            webSock := WebSocket.make().open(`ws://localhost:8069/ws`)
            convBox := Text { text = "The conversation:\r\n"; multiLine = true; editable = false }
            textBox := Text { text = "Say something!" }
            sendMsg := |Event e| {
                webSock.sendText(textBox.text)
                textBox.text = ""
            }

            webSock.onMessage = |MsgEvent msgEnv| {
                convBox.text += "\r\n" + msgEnv.msg
            }

            textBox.onAction.add(sendMsg)

            window := Window {
                title = "WebSocket ChatBox Example"
                InsetPane {
                    EdgePane {
                        center  = convBox
                        bottom  = EdgePane {
                            center  = textBox
                            right   = Button { text = "Send"; onAction.add(sendMsg) }
                        }
                    },
                },
            }

            if (Env.cur.runtime != "js") {
                // ensure event funcs are run in the UI thread
                safeMess := Unsafe(webSock.onMessage)
                webSock.onMessage = |MsgEvent msgEnv| {
                    Desktop.callAsync |->| { safeMess.val->call(msgEnv) }
                }

                // call the blocking read() method in a background thread
                safeSock := Unsafe(webSock)
                Synchronized(ActorPool()).async |->| {
                    safeSock.val->read
                }
            }

            window.open
        }
    }



1. Run 'Chatbox.fan' as a Fantom script from the command line:

    WARN Type 'afConcurrent::Synchronized' not available in Js
    [info] [afBedSheet] Found mod 'ChatboxExample_0::AppModule'
    [info] [afIoc] Adding module definitions from pod 'ChatboxExample_0'
    [info] [afIoc] Adding module definition for ChatboxExample_0::AppModule
    [info] [afIoc] Adding module definition for afBedSheet::WebSocketsModuleV1
    [info] [afIoc] Adding module definition for afBedSheet::BedSheetModule
    [info] [afIoc] Adding module definition for afIocConfig::ConfigModule
    [info] [afIoc] Adding module definition for afBedSheet::BedSheetEnvModule
    [info] [afBedSheet] Starting Bed App 'ChatboxExample_0' on port 8069
    [info] [web] http started on port 8069
    [info] [afIocEnv] Setting from environment variable 'env' : development

    43 IoC Services:
      10 Builtin
      29 Defined
       0 Proxied
       4 Created

    67.44% of services are unrealised (29/43)
       ___    __                 _____        _
      / _ |  / /_____  _____    / ___/__  ___/ /_________  __ __
     / _  | / // / -_|/ _  /===/ __// _ \/ _/ __/ _  / __|/ // /
    /_/ |_|/_//_/\__|/_//_/   /_/   \_,_/__/\__/____/_/   \_, /
             Alien-Factory BedSheet v1.4.16, IoC v2.0.10 /___/

    IoC Registry built in 213ms and started up in 53ms

    Bed App 'ChatboxExample_0' listening on http://localhost:8069/

1. Visit 'http://localhost:8069/' to load a chatbox example:


Usage
*****

2 sides to a web socket - both use the same WebSocket class

Fantom Client
=============



Javascript Client
=================
Use fantom or regular js


BedSheet Server
======


WebMod Server

